#h1=rep(constX,p)*apply(as.matrix(trainX),2,sd)*trainsize^(-1/expo)
#h2=constA*sd(trainA)*trainsize^(-1/expo)
if (p>1){
trainX0=as.matrix(trainX)%*%diag(as.numeric(1/h1))
testX0=as.matrix(testX)%*%diag(as.numeric(1/h1))
} else {
trainX0=as.matrix(trainX)/h1
testX0=as.matrix(testX)/h1
}
dX=as.matrix(pdist(as.matrix(trainX0),as.matrix(testX0)))
KX=K(dX)
KA=K(as.matrix(pdist(as.matrix(trainA),as.matrix(testA)))/h2)
predictY=t(KX*KA)%*%trainY/trainsize/colMeans(KX*KA)
ss=ss+sum((testY-predictY)^2)
}
print(sqrt(ss/rep/testsize))
return(sqrt(ss/rep/testsize))
}
generate_sample(beta=c(0,0.5),N=400,constX=constX,constA=constA)
generate_sample(beta=c(0,0.5),N=400,constX=constX,constA=constA)
constX=1
constA=1.2
generate_sample(beta=c(0,0.5),N=400,constX=constX,constA=constA)
generate_sample(beta=c(0,0.5),N=400,constX=constX,constA=constA)
generate_sample(beta=c(0,0.5),N=400,constX=constX,constA=constA)
generate_sample(beta=c(0,1),N=400,constX=constX,constA=constA)
generate_sample(beta=c(0,1),N=800,constX=constX,constA=constA)
generate_sample(beta=c(0,1),N=800,constX=constX,constA=constA)
l=1
i1=1
j1=1
k1=1
#########################
solution=c(0,1)
ns=30
# find the best parameters
ee=c(7,7.5,8,8.5,9)
c1=c(0.75,1,1.25,1.5,2)
c2=c(1.3,1.4,1.5)
rep=10
tt=5*5*5*rep
i=0
result=data.frame(ee=rep(NA,tt),c1=rep(NA,tt),c2=rep(NA,tt),
beta0_400=rep(NA,tt),beta1_400=rep(NA,tt), beta0_800=rep(NA,tt),beta1_800=rep(NA,tt),
sd1_400=rep(NA,tt),sd2_400=rep(NA,tt),sd1_800=rep(NA,tt),sd2_800=rep(NA,tt),
CI1_400=rep(NA,tt),CI2_400=rep(NA,tt),CI1_800=rep(NA,tt),CI2_800=rep(NA,tt))
i=4
result$ee[i]=ee[i1]
result$c1[i]=c1[j1]
result$c2[i]=c1[j1]*c2[k1]
set.seed(l*2000)
temp=generate_sample2(N=400,expo=ee[i1],
const1=c1[j1],const2=c1[j1]*c2[k1])
library(pdist)
library(optimr)
library(data.table)
#setwd("D:/research2017")
g=function(x){
return(1/(1+exp(-x)))
}
#first derivative of g()
g1=function(x){
return(exp(x)/((1+exp(x))^2))
}
#second derivative of g()
g2=function(x){
return((exp(x)-exp(2*x))/((1+exp(x))^3))
}
#Gaussian kernal function
K=function(x){
return(exp(-x^2/2)/(sqrt(2*pi)))
}
#first derivative of kernal function
K1=function(x){
return((-x*exp(-x^2/2))/(sqrt(2*pi)))
}
#second derivative of kernal function
K2=function(x){
return(((x^2-1)*exp(-x^2/2))/sqrt(2*pi))
}
#calculating objective function with beta
conc2=function(beta,A,ddX,CX,Xj1,Y,h2,N,sampling){
#dA=cdist(A,g(Xj1%*%beta),p=1)
cat("beta:",beta,"\n")
gg=Xj1%*%beta
dA=matrix(rep(A,sampling)-rep(gg,each=N),ncol=sampling)
ee=exp(-((dA/h2)^2/2)-ddX)
ss=-mean(t(Y)%*%ee/colSums(ee)*CX)
#cat(beta,":",ss,"\n")
return(ss)
}
#find dose
finddose2=function(Y,X,A,h1=0.1,h2=0.03,sampling=10000,xlim=c(-3,3)){
N=dim(X)[1]
p=dim(X)[2]
#beta0=c(1,0,0,0)
X1=cbind(1,X)
Xj=matrix(runif(p*sampling,min=xlim[1],max=xlim[2]),ncol=p)
Xj1=cbind(1,Xj)
dX=as.matrix(pdist(X,Xj))
ddX=dX^2/(2*(h1^2))
CX=(colMeans(exp(-ddX))/sqrt(2*pi))/(h1^p)
beta0=diag(rep(1,p+1))
#op=optim(beta0,fn=conc2,A=A,KX=KX,Xj1=Xj1,Y=Y,h2=h2)
op=multistart(beta0,fn=conc2,A=A,ddX=ddX,CX=CX,Xj1=Xj1,Y=Y,h2=h2,N=N,sampling=sampling)
argmin=which.min(op$value)
solution=as.numeric(op[argmin,1:(p+1)])
##Calculate the estimated cov
beta_X=Xj1%*%solution
gg=beta_X
dA=matrix(rep(gg,each=N)-rep(A,sampling),ncol=sampling)
KX=K(dX/h1)/(h1^p)
KA=K(dA/h2)/h2
KA1=K1(dA/h2)/(h2^2)
KA2=K2(dA/h2)/(h2^3)
mY=matrix(rep(Y,sampling),ncol=sampling)
A_=colMeans(mY*KX*KA)
B_=colMeans(KX*KA)
tA =colMeans(mY*KX*KA1) #first derivative with respect to beta
tB=colMeans(KX*KA1)
ttA=colMeans(mY*KX*KA2) #second derivative with respect to beta
ttB=colMeans(KX*KA2) #second derivative with respect to beta
CX=colMeans(KX)
Dn=t(Xj1)%*%diag(as.numeric(  ((ttA/B_)-2* (tA*tB/(B_^2))-A_*ttB/(B_^2)+
2*(A_*(tB^2)/(B_^3)))*CX   ))%*%(Xj1)/sampling*(xlim[2]-xlim[1])^p
Dn_1=solve(Dn)
#k_2=1/(2*sqrt(pi))
#k__2=1/(4*sqrt(pi))
#mY2=matrix(rep(Y^2,sampling),ncol=sampling)
#covS=t(Xj1)%*%diag(as.numeric((colMeans(mY2*KX*KA)/(B_^2)-A_^2/(B_^3))*CX^2))%*%Xj1*k_2*k__2/sampling*(xlim[2]-xlim[1])^p
#second way of calculating covariance
Phi=((mY* matrix(rep(CX/B_,each=N),nrow=N)-    matrix(rep(CX*A_/(B_)^2,each=N),nrow=N))*KX*KA1) %*% Xj1/sampling*(xlim[2]-xlim[1])^p
covS2=cov(Phi)/N
cov2=Dn_1%*%covS2%*%Dn_1
#cov0=(Dn_1%*% covS %*% Dn_1)/(N*h1*h2^3)
return(list(beta=solution,cov2=cov2,N=N,h1=h1,h2=h2))
}
Domain4=matrix(c(-2,2,-2,2,-2,2,-2,2),nrow=4,byrow=TRUE)
generate_sample2=function(C=-25,N=500,beta=c(1,0.5,0.5,0),mbeta=c(8,4,-2,-2),sd0=1,const1=1,const2=1,expo=6){
p=length(beta)-1
A=runif(N,min=0,max=2)
X=matrix(runif(N*p,min=-1,max=1),nrow=N)
Q=C*(A-cbind(1,X)%*% beta)^2
mu=Q+cbind(1,X)%*% mbeta
Y=rnorm(rep(1,N),mean=mu,sd=rep(sd0,N))
hh1=const1*sd(X)*sqrt(p)*N^(-1/expo)
hh2=const2*sd(A)*N^(-1/expo)
return(finddose2(Y,X,A=A,h1=hh1,h2=hh2,sampling=3000,xlim=c(-1,1)))
}
result$ee[i]=ee[i1]
result$c1[i]=c1[j1]
result$c2[i]=c1[j1]*c2[k1]
set.seed(l*2000)
temp=generate_sample2(N=400,expo=ee[i1],
const1=c1[j1],const2=c1[j1]*c2[k1])
set.seed(l*4000)
temp=generate_sample2(N=800,expo=ee[i1],
const1=c1[j1],const2=c1[j1]*c2[k1])
load("~/Downloads/research2017/realdata080818/realsummary.Rdata")
plot(density(realdata_value_hat03$x,na.rm=TRUE),main="estimated Value function",ylim=c(0,50))
lines(density(lol_value_hat$x,na.rm=TRUE),col="green")
lines(density(kol_value_hat$x,na.rm=TRUE),col="red")
legend(x=-0.2,y=40, lty=c(1,1,1),col=c("black","green","red"),legend=c("our","lol","kol"))
beta0=realdata_beta_hat03[complete.cases(realdata_beta_hat03),]
beta0
View(Data_standard0)
summary(lm(Dose_standardized~.,data=Dose_standard0))
summary(lm(Dose_standardized~.,data=Data_standard0))
?logit
?Logistic
fx=function(x){ (1-exp(x))/(1+exp(x))}
fx=function(x){log(x/(1-x))}
summary(lm(fx(Dose_standardized)~.,data=Data_standard0))
Data=Data_standard0
Data$dose_t=fx(Data$Dose_standardized)
View(Data)
Data=Data[,c(1:13,18)]
lm(dose_t~.,data=Data)
sum(is.na(Data$dose_t))
lm(dose_t~.,data=Data)
lm(dose_t~.,data=Data,na.rm=TRUE)
View(Data)
Data$dose_t
lm(dose_t~.,data=Data,na.rm=TRUE)
View(Data_standard0)
fx
View(Data)
summary(lm(fx(Dose_standardized)~.,data=Data_standard0[,c(1:13,17)]))
summary(lm(Dose_standardized~.,data=Data_standard0[,c(1:13,17)]))
View(Data_standard0)
summary(lm(Dose_standardized~.,data=Data_standard0[,c(1:13,16)]))
sample(3,12)
?sample
sample(12,3)
sample(12,4)
sample(12,5)
sample(12,6)
sample(4,size=4)
sample(seq(-5,3),size=4)
sample(seq(-5,5),size=4)
sample(seq(-5,5),size=4)
sample(seq(-5,3),size=4)
sample(seq(-5,3),size=4)
sample(seq(-5,3),size=4)
sample(seq(-5,3),size=4)
sample(seq(-5,3),size=4)
load("~/Documents/research2019/research2019 2/simulation21_20190120_lag2.Rdata")
par(mfrow=c(1,3))
plot(density(beta50_100[,1]),main="alpha")
plot(density(beta50_100[,2]),main="beta0")
plot(density(beta50_100[,3]),main="beta1")
library(MASS)
generate_sample3=function(seed=1, n,t,d=1,beta10=0,beta11=2,eta1=-0.2,eta2=0.2, theta1=0.8,theta2=0, gamma1=1, gamma2=-0.5, cc=sqrt(0.5),sigma=0.5){
set.seed(seed)
rcor=(sigma^2)*exp(as.matrix(log(cc)*dist(1:(t+1),upper=TRUE,diag=TRUE)))
epsilon=as.matrix(mvrnorm(n=n,mu=rep(0,t+1),Sigma=rcor))
A=matrix(NA,nrow=n,ncol=t)
#EX=matrix(NA,nrow=n,ncol=t)
X=array(NA,dim=c(n,t,d+1))
Y=matrix(NA,nrow=n,ncol=t+1)
#EA[,1]=1
A[,1]=runif(n=n,min=0,max=1)
#EX[,1]=1
X[,,1]=1
X[,1,2]=rnorm(n=n,mean=0,sd=0.5)
#Y[,1]=0
for (i in 2:t){
#EX[,i]=1/(1+exp(-xi*A[,i-1]))
X[,i,2]=rnorm(n=n,mean=eta1*X[,i-1,2]+eta2*A[,i-1],sd=0.5)
A[,i]=rnorm(n=n,mean=gamma1*X[,i,2]+gamma2*A[,i-1],sd=0.5)
#EA[,i]=1/(1+exp(-(eta1*A[,i-1]+eta2*S[,i])))
if (i>2) {
Y[,i]=theta1*X[,i-1,2]+theta2*(A[,i-2])-A[,i-1]*(A[,i-1]-beta10-beta11*X[,i-1,2])+epsilon[,i]
}
}
Y[,t+1]=theta1*(X[,t,2])+theta2*(A[,t-1])-A[,t]*(A[,t]-beta10-beta11*X[,t,2])+epsilon[,t+1]
return(list(A=A,X=X,Y=Y,n=n,t=t,d=d))
}
#plot(seq(t),X[1,,2],type="l",ylim=c(-5,5))
#for (i in 2:n){
#  lines(seq(t),X[i,,2])
#}
#plot(seq(t),A[1,],type="l",ylim=c(-5,5))
#for (i in 2:n){
#  lines(seq(t),A[i,])
#}
#plot(seq(t+1),Y[1,],type="l",ylim=c(-5,5))
#for (i in 2:n){
#  lines(seq(t+1),Y[i,])
#}
#plot(density(X[1,,2]))#
K=function(x,h){
return(1/(h*(sqrt(2*pi)))*exp(-(x/h)^2/2))
}
lagk=function(X,A,Y,lag,n,t,d=1,lagmax=2,bootstrap=0){ #k is lag
Ahat=matrix(NA,nrow=n,ncol=t-lag+1)
Yhat=matrix(NA,nrow=n,ncol=t-lag+1)
AAhat=matrix(NA,nrow=n,ncol=t-lag+1)
firstpart=matrix(0,nrow=d+2,ncol=d+2)
secondpart=rep(0,d+2)
KKtt=array(NA,dim=c(t-lag+1,n,n))
for (tt in ((max(lagmax-lag+1,1)):(t-lag+1))){
ht=const*n^{-1/expo}*sd(X[,tt,2:(d+1)])#bw.nrd(X[,tt,2:(d+1)])#
KK=K(as.matrix(dist(X[,tt,2:(d+1)])),h=ht)
KKtt[tt,,]=KK
Ahat[,tt]=rowMeans(KK*matrix(rep(A[,tt],each=n),ncol=n))/rowMeans(KK)
Yhat[,tt]=rowMeans(KK*matrix(rep(Y[,tt+lag],each=n),ncol=n))/rowMeans(KK)
AAhat[,tt]=rowMeans(KK*matrix(rep(A[,tt]^2,each=n),ncol=n))/rowMeans(KK)
temp= rbind(t(A[,tt]^2-AAhat[,tt]),
t(X[,tt,1:(d+1)])%*%
diag(A[,tt]-Ahat[,tt]))
firstpart=firstpart+temp%*%t(temp)
secondpart=secondpart+
rowSums(temp%*%diag(Y[,tt+lag]-Yhat[,tt]))
}
betahat=solve(as.matrix(firstpart))%*% secondpart
L1hat_phi=matrix(0,nrow=n,ncol=d+2)
L2hat=matrix(0,nrow=n,ncol=d+2)
for (tt in ((max(lagmax-lag+1,1)):(t-lag+1))){
L1hat_phi[,1]=L1hat_phi[,1]+(A[,tt]^2-AAhat[,tt])^2*betahat[1]+(A[,tt]^2-AAhat[,tt])* (diag(A[,tt]-Ahat[,tt])%*%X[,tt,1:(d+1)])%*%betahat[2:(d+2)]
for (j in (1:n)){
L1hat_phi[j,2:(d+2)]=L1hat_phi[j,2:(d+2)]+(A[j,tt]-Ahat[j,tt])^2*X[j,tt,1:(d+1)]%*%t(X[j,tt,1:(d+1)])%*%betahat[2:(d+2)]
}
L2hat[,1]=L2hat[,1]+(A[,tt]^2-AAhat[,tt]) *(Y[,tt+lag]-Yhat[,tt])
L2hat[,2:(d+2)]=L2hat[,2:(d+2)]+diag((Y[,tt+lag]-Yhat[,tt])*(A[,tt]-Ahat[,tt]))%*%X[,tt,1:(d+1)]
}
estimate_var=var(L1hat_phi-L2hat)
cat("\n","beta:", betahat, "\n")
if (bootstrap>0){
cat("BOOT: ")
boot=matrix(NA,nrow=bootstrap,ncol=d+2)
for (i in 1:bootstrap){
cat(i,",")
v=sample(n, n,replace=TRUE)
bootX=X[v,,]
bootA=A[v,]
bootY=Y[v,]
bootAhat=matrix(NA,nrow=n,ncol=t-lag+1)
bootYhat=matrix(NA,nrow=n,ncol=t-lag+1)
bootAAhat=matrix(NA,nrow=n,ncol=t-lag+1)
bootfirstpart=matrix(0,nrow=d+2,ncol=d+2)
bootsecondpart=rep(0,d+2)
for (tt in ((max(lagmax-lag+1,1)):(t-lag+1))){
hboot=const*n^{-1/expo}*sd(bootX[,tt,2:(d+1)])#bw.nrd(bootX[,tt,2:(d+1)])
KK=K(as.matrix(dist(bootX[,tt,2:(d+1)])),h=hboot)
bootAhat[,tt]=rowMeans(KK*matrix(rep(bootA[,tt],each=n),ncol=n))/rowMeans(KK)
bootYhat[,tt]=rowMeans(KK*matrix(rep(bootY[,tt+lag],each=n),ncol=n))/rowMeans(KK)
bootAAhat[,tt]=rowMeans(KK*matrix(rep(bootA[,tt]^2,each=n),ncol=n))/rowMeans(KK)
temp= rbind(t(bootA[,tt]^2-bootAAhat[,tt]),
t(bootX[,tt,1:(d+1)])%*%
diag(bootA[,tt]-bootAhat[,tt]))
bootfirstpart=bootfirstpart+temp%*%t(temp)
bootsecondpart=bootsecondpart+rowSums(temp%*%diag(bootY[,tt+lag]-bootYhat[,tt]))
}
boot[i,]=solve(as.matrix(bootfirstpart))%*% bootsecondpart
}
result=list(beta=betahat,sd=apply(boot,2,sd),estimate_sd=sqrt(diag(estimate_var)))
cat("\n", "sd:", result$sd, "\n")
} else{
result=list(beta=betahat,sd=NA,estimate_sd=sqrt(diag(estimate_var)))
}
return(result)
}
const=0.305
expo=3
d=1
it=200
n=100
t=50
beta10=0
beta11=2
beta50_100=matrix(NA,nrow=it,ncol=d+2)
sd50_100=matrix(NA,nrow=it,ncol=d+2)
estimate_sd50_100=matrix(NA,nrow=it,ncol=d+2)
i=1
set.seed(20000+i)
print(i)
data=generate_sample3(seed=i,n=n,t=t,d=d)
A=data$A
X=data$X
Y=data$Y
d=1
lag=1
lagmax=2
Ahat=matrix(NA,nrow=n,ncol=t-lag+1)
Yhat=matrix(NA,nrow=n,ncol=t-lag+1)
AAhat=matrix(NA,nrow=n,ncol=t-lag+1)
firstpart=matrix(0,nrow=d+2,ncol=d+2)
secondpart=rep(0,d+2)
KKtt=array(NA,dim=c(t-lag+1,n,n))
for (tt in ((max(lagmax-lag+1,1)):(t-lag+1))){
ht=const*n^{-1/expo}*sd(X[,tt,2:(d+1)])#bw.nrd(X[,tt,2:(d+1)])#
KK=K(as.matrix(dist(X[,tt,2:(d+1)])),h=ht)
KKtt[tt,,]=KK
Ahat[,tt]=rowMeans(KK*matrix(rep(A[,tt],each=n),ncol=n))/rowMeans(KK)
Yhat[,tt]=rowMeans(KK*matrix(rep(Y[,tt+lag],each=n),ncol=n))/rowMeans(KK)
AAhat[,tt]=rowMeans(KK*matrix(rep(A[,tt]^2,each=n),ncol=n))/rowMeans(KK)
temp= rbind(t(A[,tt]^2-AAhat[,tt]),
t(X[,tt,1:(d+1)])%*%
diag(A[,tt]-Ahat[,tt]))
firstpart=firstpart+temp%*%t(temp)
secondpart=secondpart+
rowSums(temp%*%diag(Y[,tt+lag]-Yhat[,tt]))
}
betahat=solve(as.matrix(firstpart))%*% secondpart
lagk=function(X,A,Y,lag,n,t,d=1,lagmax=2,bootstrap=0){ #k is lag
Ahat=matrix(NA,nrow=n,ncol=t-lag+1)
Yhat=matrix(NA,nrow=n,ncol=t-lag+1)
AAhat=matrix(NA,nrow=n,ncol=t-lag+1)
firstpart=matrix(0,nrow=d+2,ncol=d+2)
secondpart=rep(0,d+2)
KKtt=array(NA,dim=c(t-lag+1,n,n))
for (tt in ((max(lagmax-lag+1,1)):(t-lag+1))){
ht=const*n^{-1/expo}*sd(X[,tt,2:(d+1)])#bw.nrd(X[,tt,2:(d+1)])#
KK=K(as.matrix(dist(X[,tt,2:(d+1)])),h=ht)
KKtt[tt,,]=KK
Ahat[,tt]=rowMeans(KK*matrix(rep(A[,tt],each=n),ncol=n))/rowMeans(KK)
Yhat[,tt]=rowMeans(KK*matrix(rep(Y[,tt+lag],each=n),ncol=n))/rowMeans(KK)
AAhat[,tt]=rowMeans(KK*matrix(rep(A[,tt]^2,each=n),ncol=n))/rowMeans(KK)
temp= rbind(t(A[,tt]^2-AAhat[,tt]),
t(X[,tt,1:(d+1)])%*%
diag(A[,tt]-Ahat[,tt]))
firstpart=firstpart+temp%*%t(temp)
secondpart=secondpart+
rowSums(temp%*%diag(Y[,tt+lag]-Yhat[,tt]))
}
betahat=solve(as.matrix(firstpart))%*% secondpart
L1hat_phi=matrix(0,nrow=n,ncol=d+2)
L2hat=matrix(0,nrow=n,ncol=d+2)
for (tt in ((max(lagmax-lag+1,1)):(t-lag+1))){
L1hat_phi[,1]=L1hat_phi[,1]+(A[,tt]^2-AAhat[,tt])^2*betahat[1]+(A[,tt]^2-AAhat[,tt])* (diag(A[,tt]-Ahat[,tt])%*%X[,tt,1:(d+1)])%*%betahat[2:(d+2)]
for (j in (1:n)){
L1hat_phi[j,2:(d+2)]=L1hat_phi[j,2:(d+2)]+(A[j,tt]-Ahat[j,tt])^2*X[j,tt,1:(d+1)]%*%t(X[j,tt,1:(d+1)])%*%betahat[2:(d+2)]
}
L2hat[,1]=L2hat[,1]+(A[,tt]^2-AAhat[,tt]) *(Y[,tt+lag]-Yhat[,tt])
L2hat[,2:(d+2)]=L2hat[,2:(d+2)]+diag((Y[,tt+lag]-Yhat[,tt])*(A[,tt]-Ahat[,tt]))%*%X[,tt,1:(d+1)]
}
estimate_var=solve(firstpart/n) %*% var(L1hat_phi-L2hat)%*% solve(firstpart/n) /n
cat("\n","beta:", betahat, "\n")
if (bootstrap>0){
cat("BOOT: ")
boot=matrix(NA,nrow=bootstrap,ncol=d+2)
for (i in 1:bootstrap){
cat(i,",")
v=sample(n, n,replace=TRUE)
bootX=X[v,,]
bootA=A[v,]
bootY=Y[v,]
bootAhat=matrix(NA,nrow=n,ncol=t-lag+1)
bootYhat=matrix(NA,nrow=n,ncol=t-lag+1)
bootAAhat=matrix(NA,nrow=n,ncol=t-lag+1)
bootfirstpart=matrix(0,nrow=d+2,ncol=d+2)
bootsecondpart=rep(0,d+2)
for (tt in ((max(lagmax-lag+1,1)):(t-lag+1))){
hboot=const*n^{-1/expo}*sd(bootX[,tt,2:(d+1)])#bw.nrd(bootX[,tt,2:(d+1)])
KK=K(as.matrix(dist(bootX[,tt,2:(d+1)])),h=hboot)
bootAhat[,tt]=rowMeans(KK*matrix(rep(bootA[,tt],each=n),ncol=n))/rowMeans(KK)
bootYhat[,tt]=rowMeans(KK*matrix(rep(bootY[,tt+lag],each=n),ncol=n))/rowMeans(KK)
bootAAhat[,tt]=rowMeans(KK*matrix(rep(bootA[,tt]^2,each=n),ncol=n))/rowMeans(KK)
temp= rbind(t(bootA[,tt]^2-bootAAhat[,tt]),
t(bootX[,tt,1:(d+1)])%*%
diag(bootA[,tt]-bootAhat[,tt]))
bootfirstpart=bootfirstpart+temp%*%t(temp)
bootsecondpart=bootsecondpart+rowSums(temp%*%diag(bootY[,tt+lag]-bootYhat[,tt]))
}
boot[i,]=solve(as.matrix(bootfirstpart))%*% bootsecondpart
}
result=list(beta=betahat,sd=apply(boot,2,sd),estimate_sd=sqrt(diag(estimate_var)))
cat("\n", "sd:", result$sd, "\n")
} else{
result=list(beta=betahat,sd=NA,estimate_sd=sqrt(diag(estimate_var)))
}
return(result)
}
res=lagk(X,A,Y,lag=1,n=n,t=t,d=d,lagmax=2,bootstrap=0)
beta50_100[i,]=res$beta
estimate_sd50_100[i,]=res$estimate_sd
res$estimate_sd
const=0.305
expo=3
#lag 1
d=1
it=200
n=100
t=50
beta10=0
beta11=2
beta50_100=matrix(NA,nrow=it,ncol=d+2)
sd50_100=matrix(NA,nrow=it,ncol=d+2)
estimate_sd50_100=matrix(NA,nrow=it,ncol=d+2)
for (i in 1:it){
set.seed(20000+i)
print(i)
data=generate_sample3(seed=i,n=n,t=t,d=d)
A=data$A
X=data$X
Y=data$Y
res=lagk(X,A,Y,lag=1,n=n,t=t,d=d,lagmax=2,bootstrap=0)
beta50_100[i,]=res$beta
sd50_100[i,]=res$sd
estimate_sd50_100[i,]=res$estimate_sd
save.image("bootstrap_lag1_50_100-3.Rdata")
}
par(mfrow=c(1,3))
plot(density(beta50_100[,1]),main="alpha")
plot(density(beta50_100[,2]),main="beta0")
plot(density(beta50_100[,3]),main="beta1")
colMeans(estimate_sd50_100)
l=beta50_100-1.96*estimate_sd50_100
u=beta50_100+1.96*estimate_sd50_100
mean((l[,1]+1)*(u[,1]+1)<0)
mean((l[,2])*(u[,2])<0)
mean((l[,3]-2)*(u[,3]-2)<0)
colMeans(estimate_sd50_100)
View(estimate_sd50_100)
sd(betahat)
apply(betahat,2,sd)
apply(beta50_100,2,sd)
x=c(2,3,5)
?apply
x <- cbind(x1 = 3, x2 = c(4:1, 2:5))
dimnames(x)[[1]] <- letters[1:8]
apply(x, 2, mean, trim = .2)
col.sums <- apply(x, 2, function(x) x-1)
col.sums
x <- cbind(x1 = 3, x2 = c(4:1, 2:5))
x
setwd("~/Documents/research2017/KAL-JASA/final-code")
?optim
a=matric(c(2,NA,5))
a=matrix(c(2,NA,5))
is.na(a)
b=NA
is.na(b)
sum(is.na(b))
sum(is.na(a))
sum(!is.na(a))
sum(!is.na(B))
sum(!is.na(b))
diag(rep(1,p+1))
diag(rep(1,4+1))
rbind(diag(rep(1,4+1)),rep(1,4+1))
sum(log(3))
sum(log(c(2,3)))
sum(log(c(3,3)))
1.791759^2
1.0986^2
exp(sum(log(3)))
exp(sum(log(c(3,3))))
exp(sum(log(c(3,2))))
setwd("~/Django/supercar/race/static/race")
setwd("~/Django/supercar")
